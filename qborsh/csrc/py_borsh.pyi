from typing import Dict, Optional, Set

def set_validation(validate: bool) -> None: ...

class Buffer:
    def __init__(self, capacity: int) -> None: ...
    @property
    def size(self) -> int: ...
    @property
    def capacity(self) -> int: ...
    @property
    def offset(self) -> int: ...
    @property
    def data(self) -> memoryview: ...
    def free(self) -> None: ...
    def reset(self) -> None: ...
    def reset_offset(self) -> None: ...

    # --- Write Methods ---
    def write_u8(self, val: int) -> None: ...
    def write_i8(self, val: int) -> None: ...
    def write_u16(self, val: int) -> None: ...
    def write_i16(self, val: int) -> None: ...
    def write_u32(self, val: int) -> None: ...
    def write_i32(self, val: int) -> None: ...
    def write_u64(self, val: int) -> None: ...
    def write_i64(self, val: int) -> None: ...
    def write_u128(self, val: int) -> None: ...
    def write_i128(self, val: int) -> None: ...
    def write_f32(self, val: float) -> None: ...
    def write_f64(self, val: float) -> None: ...
    def write_bool(self, val: bool) -> None: ...
    def write_fixed_array(self, data: bytes) -> None: ...
    def write_vec(self, data: bytes) -> None: ...
    def write_option(self, data: Optional[bytes]) -> None: ...
    def write_enum(self, variant_idx: int, data: Optional[bytes] = None) -> None: ...
    def write_hashmap(self, data: Dict[bytes, bytes]) -> None: ...
    def write_hashset(self, data: Set[bytes]) -> None: ...

    # --- Read Methods ---
    def read_u8(self) -> int: ...
    def read_i8(self) -> int: ...
    def read_u16(self) -> int: ...
    def read_i16(self) -> int: ...
    def read_u32(self) -> int: ...
    def read_i32(self) -> int: ...
    def read_u64(self) -> int: ...
    def read_i64(self) -> int: ...
    def read_u128(self) -> int: ...
    def read_i128(self) -> int: ...
    def read_f32(self) -> float: ...
    def read_f64(self) -> float: ...
    def read_bool(self) -> bool: ...
    def read_fixed_array(self, length: int) -> bytes: ...
    def read_vec(self) -> bytes: ...
    def read_option(self) -> Optional[bytes]: ...
    def read_enum_variant(self) -> int: ...
    def read_enum_data(self, length: int) -> bytes: ...
    def read_hashmap(self) -> Dict[bytes, bytes]: ...
    def read_hashset(self) -> Set[bytes]: ...
